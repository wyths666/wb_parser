from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException, TimeoutException
import pandas as pd
import time
import re
from urllib.parse import quote

from redactor import redact


class WildberriesRobustParser:
    def __init__(self, headless=True):
        self.driver = None
        self.setup_driver(headless)

    def setup_driver(self, headless=True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞"""
        print("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
        chrome_options = Options()

        if headless:
            chrome_options.add_argument('--headless')

        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument(
            '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        chrome_options.add_argument('--window-size=1920,1080')

        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        self.wait = WebDriverWait(self.driver, 15)
        print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    def parse_by_keyword(self, keyword: str, max_products: int = 50) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{keyword}'")

        try:
            search_url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={quote(keyword)}&sort=popular"
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {search_url}")

            self.driver.get(search_url)
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-nm-id]')))
            time.sleep(3)

            products = []
            page = 1

            while len(products) < max_products:
                print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}...")

                self._scroll_page()

                # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è –∫–∞—Ä—É—Å–µ–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
                product_cards = self._get_valid_product_cards()

                if not product_cards:
                    print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    break

                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏): {len(product_cards)}")

                new_products = self._parse_cards_safely(product_cards, max_products - len(products))
                products.extend(new_products)

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {len(new_products)} —Ç–æ–≤–∞—Ä–æ–≤")
                print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(products)}/{max_products}")

                if len(products) >= max_products:
                    print("üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                    break

                if not self._go_to_next_page():
                    print("‚èπÔ∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    break

                page += 1
                time.sleep(2)

            return products

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return []

    def parse_by_seller(self, seller_id: str, max_products: int = 50) -> list:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–≤—Ü—É"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_id}")

        try:
            seller_url = f"https://www.wildberries.ru/seller/{seller_id}"
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {seller_url}")

            self.driver.get(seller_url)
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-nm-id]')))
            time.sleep(3)

            products = []
            page = 1

            while len(products) < max_products:
                print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}...")

                self._scroll_page()

                # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è –∫–∞—Ä—É—Å–µ–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
                product_cards = self._get_valid_product_cards()

                if not product_cards:
                    print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    break

                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏): {len(product_cards)}")

                new_products = self._parse_cards_safely(product_cards, max_products - len(products))
                products.extend(new_products)

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—à–µ–Ω–æ: {len(new_products)} —Ç–æ–≤–∞—Ä–æ–≤")

                if len(products) >= max_products:
                    break

                if not self._go_to_next_page():
                    break

                page += 1
                time.sleep(2)

            return products

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            return []

    def _get_valid_product_cards(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –∫–∞—Ä—É—Å–µ–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å data-nm-id
            all_cards = self.driver.find_elements(By.CSS_SELECTOR, 'article[data-nm-id]')

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            valid_cards = []

            for card in all_cards:
                if self._is_valid_card(card):
                    valid_cards.append(card)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            filtered_count = len(all_cards) - len(valid_cards)
            if filtered_count > 0:
                print(f"    üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏: {filtered_count}")

            return valid_cards

        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return []

    def _is_valid_card(self, card):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π (–Ω–µ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)"""
        try:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            constructor_selectors = [
                '.catalog-page__constructor-carousel',
                '.j-constructor-carousel',
                '[class*="constructor-carousel"]'
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
            for selector in constructor_selectors:
                try:
                    # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º –∫–∞—Ä—É—Å–µ–ª–∏
                    constructor_parent = card.find_element(By.XPATH,
                                                           f"./ancestor::*[contains(@class, 'constructor-carousel') or contains(@class, 'catalog-page__constructor-carousel')]")
                    if constructor_parent:
                        return False
                except NoSuchElementException:
                    continue

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            card_classes = card.get_attribute('class')
            if card_classes and any(keyword in card_classes for keyword in ['constructor', 'carousel']):
                return False

            return True

        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–∞–ª–∏–¥–Ω–æ–π (–ª—É—á—à–µ —Å–æ–±—Ä–∞—Ç—å –ª–∏—à–Ω–µ–µ, —á–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return True

    def _parse_cards_safely(self, cards, max_count: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        products = []

        for i, card in enumerate(cards[:max_count]):
            try:
                product_info = self._extract_product_safely(card)
                if product_info:
                    products.append(product_info)
                    price_display = f"{product_info['price']:,} —Ä—É–±." if product_info['price'] else "–Ω–µ—Ç —Ü–µ–Ω—ã"
                    print(f"  ‚úÖ {i + 1}. {product_info['name'][:50]}... - {price_display}")

            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i + 1}: {str(e)[:100]}...")
                continue

        return products

    def _extract_product_safely(self, card):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            product_id = card.get_attribute('data-nm-id')
            if not product_id:
                return None

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            product_info = {
                'product_id': product_id,
                'product_url': self._safe_get_attribute(card, 'a.j-card-link', 'href'),
                'name': self._safe_get_text(card, '.product-card__name'),
                'brand': self._safe_get_text(card, '.product-card__brand'),
                'price': self._safe_extract_price(card),
                'photo_url': self._safe_get_photo_url(card),
                'discount': self._safe_get_text(card, '.product-card__tip--sale'),
                'rating': self._safe_get_text(card, '.address-rate-mini'),
                'reviews_count': self._safe_get_text(card, '.product-card__count')
            }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            product_info['full_name'] = f"{product_info['brand']} {product_info['name']}".strip()
            if product_info['name'].startswith('/'):
                product_info['name'] = product_info['name'][2:]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if not product_info['product_url'] or not product_info['name']:
                return None

            return product_info

        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def _safe_get_attribute(self, element, selector, attribute):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            el = element.find_element(By.CSS_SELECTOR, selector)
            return el.get_attribute(attribute)
        except NoSuchElementException:
            return ""

    def _safe_get_text(self, element, selector):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            el = element.find_element(By.CSS_SELECTOR, selector)
            return el.text.strip()
        except NoSuchElementException:
            return ""

    def _safe_extract_price(self, card):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã
            price_selectors = [
                '.price__lower-price',
                '.lower-price',
                '.final-price',
                '.price',
                '.product-card__price'
            ]

            for selector in price_selectors:
                try:
                    price_element = card.find_element(By.CSS_SELECTOR, selector)
                    price_text = price_element.text
                    price = self._parse_price(price_text)
                    if price:
                        return price
                except NoSuchElementException:
                    continue

            return None

        except Exception:
            return None

    def _safe_get_photo_url(self, card):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ç–æ"""
        try:
            img_element = card.find_element(By.CSS_SELECTOR, 'img.j-thumbnail')
            return (
                    img_element.get_attribute('data-src-pb') or
                    img_element.get_attribute('src') or
                    ""
            )
        except NoSuchElementException:
            return ""

    def _parse_price(self, price_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            numbers = re.findall(r'\d+', price_text.replace(' ', '').replace('‚ÇΩ', ''))
            return int(''.join(numbers)) if numbers else None
        except:
            return None

    def _scroll_page(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            print("    üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

            scroll_pause_time = 1
            scroll_height = self.driver.execute_script("return document.body.scrollHeight")
            current_position = 0
            scroll_step = 500

            while current_position < scroll_height:
                self.driver.execute_script(f"window.scrollTo(0, {current_position});")
                current_position += scroll_step
                time.sleep(scroll_pause_time)

                new_height = self.driver.execute_script("return document.body.scrollHeight")
                if new_height > scroll_height:
                    scroll_height = new_height

            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(1)

        except Exception as e:
            print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")

    def _go_to_next_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            print("    üîÑ –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

            pagination_selectors = [
                '.pagination__next',
                '.pagination-next',
                'a.pagination-next',
                '.j-next-page'
            ]

            for selector in pagination_selectors:
                try:
                    next_btn = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if next_btn.is_enabled():
                        self.driver.execute_script("arguments[0].click();", next_btn)
                        time.sleep(3)
                        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-nm-id]')))
                        print("    ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        return True
                except:
                    continue

            print("    ‚ùå –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            return False

    def save_to_excel(self, products, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel"""
        if not products:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False

        if not filename:
            timestamp = int(time.time())
            filename = f"wildberries_products_{timestamp}.xlsx"

        try:
            df = pd.DataFrame(products)

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            initial_count = len(df)
            df = df.drop_duplicates(subset=['product_id'], keep='first')
            final_count = len(df)

            if initial_count != final_count:
                print(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {initial_count - final_count}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df = df[["product_id", "product_url", "brand", "name", "price", "discount", "rating", "reviews_count", "full_name", "photo_url"]]
            redact(df, filename)
            print(f"\nüéâ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´!")
            print(f"üìÅ –§–∞–π–ª: {filename}")
            print(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(df)}")

            if not df.empty:
                print(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['price'].min():,} - {df['price'].max():,} —Ä—É–±.")
                print(f"‚≠ê –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {df['brand'].nunique()}")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            self.driver.quit()
            print("\nüëã –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
